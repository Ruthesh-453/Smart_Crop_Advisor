import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

Explain this code line by line clearly and give proper explanation

crop = pd.read_csv('Crop_recommendation.csv')
crop.head()
crop.isnull().sum()
crop.duplicated().sum()
crop.info()
crop.describe()

crop_label_counts = crop['label'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=crop_label_counts.index, y=crop_label_counts.values, palette='viridis')
plt.xticks(rotation=90)
plt.xlabel('Crop Labels')
plt.ylabel('Frequency')
plt.title('Crop Label Distribution')
plt.show()

selected_features = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']
sns.pairplot(crop[selected_features], diag_kind='kde', markers='o')
plt.suptitle('Scatter Plot Matrix of Selected Features')
plt.show()

corr = crop[selected_features].corr()
corr

plt.figure(figsize=(10, 6))
sns.heatmap(corr, annot=True, cbar=True, cmap='coolwarm', fmt='.2g')
plt.title('Correlation Heatmap of Selected Features')
plt.show()
crop['label'].value_counts()

crop_dict = {
 'rice': 1,
 'maize': 2,
 'jute': 3,
 'cotton': 4,
 'coconut': 5,
 'papaya': 6,
 'orange': 7,
 'apple': 8,
 'muskmelon': 9,
 'watermelon': 10,
 'grapes': 11,
 'mango': 12,
 'banana': 13,
 'pomegranate': 14,
 'lentil': 15,
 'blackgram': 16,
 'mungbean': 17,
 'mothbeans': 18,
 'pigeonpeas': 19,
 'kidneybeans': 20,
 'chickpea': 21,
 'coffee': 22
}
crop['label_num'] = crop['label'].map(crop_dict)

crop.head()
crop.drop('label',axis=1,inplace=True)
X = crop.iloc[:, :-1]
y = crop.iloc[:, -1]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
15
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import ExtraTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
# create instances of all models
models = {
 'Linear Discriminant Analysis': LinearDiscriminantAnalysis(),
 'Logistic Regression': LogisticRegression(),
 'Support Vector Machine': SVC(),
 'K-Nearest Neighbors': KNeighborsClassifier(),
 'Decision Tree': DecisionTreeClassifier(),
 'Random Forest': RandomForestClassifier(),
 'Bagging': BaggingClassifier(),
 'AdaBoost': AdaBoostClassifier(),
 'Gradient Boosting': GradientBoostingClassifier(),
 'Extra Trees': ExtraTreeClassifier(),
}
from sklearn.metrics import accuracy_score
for name, model in models.items():
 model.fit(X_train, y_train)
 y_pred = model.predict(X_test)
 acc = accuracy_score(y_test, y_pred)
 print(f'{name}:\nAccuracy: {acc:.4f}')
rdf = RandomForestClassifier()
rdf.fit(X_train,y_train)
y_pred = rdf.predict(X_test)
print(accuracy_score(y_test,y_pred))
model_names = []
accuracies = []
for name, model in models.items():
 model.fit(X_train, y_train)
 y_pred = model.predict(X_test)
 acc = accuracy_score(y_test, y_pred)
 model_names.append(name)
 accuracies.append(acc)
plt.figure(figsize=(10, 6))
sns.barplot(x=accuracies, y=model_names, palette='coolwarm', orient='h')
plt.xlabel('Accuracy')
plt.ylabel('Model Name')
plt.title('Model Comparison')
plt.xlim(0, 1)
plt.show()

def predict_crop(N, P, K, temperature, humidity, pH, rainfall):
 # Create a numpy array with the input values
    input_values = np.array([[N, P, K, temperature, humidity, pH, rainfall]])
 # Use the model to make a prediction
    prediction = rdf.predict(input_values)
 # Return the predicted crop label
    return prediction[0]

def xyz(pred):
    if pred == 1:
        print("Rice is the best crop to be cultivated right there")
    elif pred == 2:
        print("Maize is the best crop to be cultivated right there")
    elif pred == 3:
        print("Jute is the best crop to be cultivated right there")
    elif pred == 4:
        print("Cotton is the best crop to be cultivated right there")
    elif pred == 5:
        print("Coconut is the best crop to be cultivated right there")
    elif pred == 6:
        print("Papaya is the best crop to be cultivated right there")
    elif pred == 7:
        print("Orange is the best crop to be cultivated right there")
    elif pred == 8:
        print("Apple is the best crop to be cultivated right there")
    elif pred == 9:
        print("Muskmelon is the best crop to be cultivated right there")
    elif pred == 10:
        print("Watermelon is the best crop to be cultivated right there")
    elif pred == 11:
        print("Grapes is the best crop to be cultivated right there")
    elif pred == 12:
        print("Mango is the best crop to be cultivated right there")
    elif pred == 13:
        print("Banana is the best crop to be cultivated right there")
    elif pred == 14:
        print("Pomegranate is the best crop to be cultivated right there")
    elif pred == 15:
        print("Lentil is the best crop to be cultivated right there")
    elif pred == 16:
        print("Blackgram is the best crop to be cultivated right there")
    elif pred == 17:
        print("Mungbean is the best crop to be cultivated right there")
    elif pred == 18:
        print("Mothbeans is the best crop to be cultivated right there")
    elif pred == 19:
        print("Pigeonpeas is the best crop to be cultivated right there")
    elif pred == 20:
        print("Kidneybeans is the best crop to be cultivated right there")
    elif pred == 21:
        print("Chickpea is the best crop to be cultivated right there")
    elif pred == 22:
        print("Coffee is the best crop to be cultivated right there")
    else:
        print("Sorry, we could not determine the best crop to be cultivate")

N = 21
P = 26
K = 27
tem = 27.003155
humidity = 47.675254
ph = 5.699587
rainfall = 95.851183

pred = predict_crop(N, P, K, tem, humidity, ph, rainfall)
xyz(pred)

N = 6
P = 16
K = 9
tem = 22.003155
humidity = 49.675254
ph = 9.699587
rainfall = 65.851183

pred = predict_crop(N, P, K, tem, humidity, ph, rainfall)
xyz(pred)
